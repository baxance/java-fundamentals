/*
 * This Java source file was generated by the Gradle 'init' task.
 */

package basicLibrary;

import java.util.*;
import java.util.Arrays;
import java.util.concurrent.ThreadLocalRandom;
import java.util.HashMap;
import java.util.HashSet;

public class Library {

    public static int[] roll(int n){
        int[] results = new int[n];
        System.out.println("LENGTH OF RESULTS ARRAY: " + results.length);
        for(int i = 0; i < results.length; i++) {
            int diceRoll = ThreadLocalRandom.current().nextInt(1, 6 +1);
            System.out.println("INDIVIDUAL DICE ROLLS: " + diceRoll);
            results[i] = diceRoll;
        }
        System.out.println("DICE ROLL RESULTS ARRAY : " + Arrays.toString(results));
        return results;
    }

    public static boolean containsDuplicates(int[] arr){
        for (int i=0; i<arr.length; i++){
            for (int j=i+1; j<arr.length; j++) {
                if (arr[i] == arr[j]) {
                    return true;
                }
            }
        }
        return false;
    }

    public static double calculateAverage(double[] arr){
        double total = 0;
        for(int i=0; i<arr.length; i++){
            total = total + arr[i];
            System.out.println("TOTAL THIS LOOP: " + total);
        }
        System.out.println("LENGTH OF THE ARRAY: " + arr.length);
        double average = total / arr.length;
        System.out.println("AVERAGE OF ARRAY VALUES:");
        System.out.printf("%.2f%n", average);
        return average;
    }

    public static int[] calculateLowAverage(int[][] arr){
        double total = 0;
        double average;
        double[] arrayOfAverages = new double[arr.length];
            for(int i=0;i<arr.length;i++){
                for(int j=0;j<arr[i].length;j++){
                    total += arr[i][j];
//                        System.out.println(total);
                }
                average = total / arr[i].length;
//                System.out.println(average);
                arrayOfAverages[i] = average;
                total = 0;
                System.out.println("THIS IS THE AVERAGE: " + arrayOfAverages[i] + " at index: " + i);
            }
            int index = 0;
            double min = arrayOfAverages[index];
            for(int k=1;k<arrayOfAverages.length;k++){
                if (arrayOfAverages[k] < min){
                    min=arrayOfAverages[k];
                    index = k;
                }
            }
        System.out.println("ARRAY WITH SMALLEST AVERAGE: " + Arrays.toString(arr[index]));
            return arr[index];
    }

    public static String weatherData(int[][] arr){

        HashMap<String, Integer> response = new HashMap<>();
        Set<Integer> temps = new HashSet<>();

        for(int i=0;i<arr.length;i++){
            for(int j=0;j<arr[i].length;j++){
                temps.add(arr[i][j]);
            }
        }

//        List<Integer> list = new ArrayList<Integer>(temps);
//        Collections.sort(list);
//        System.out.println("sorted? " + list);

        for (Integer num : temps) {
            response.put("Never saw temperature: ", num);
//            System.out.println(response);
        }

        for (String i : response.keySet()){
            System.out.println("key: " + i + " value: " + response.get(i));
        }

        String result = "High: 72";
        return result;
    }
}

// Code review notes for lab 03 LINTER PROBLEM
/*
* problem domain: Lint the file inside of the default method
* linter("src/main/resources/gates.js");
*
*public static void linter(String filePathPotato){
*   // problem domain: print out the line number and that it needs a semicolon
*   // use a scanner
*   // give scanner a variable
*   // use hashset of curly braces, where to put semicolons,
*   // iterate through lines and check if it has a semicolon and print if there is is not
*   Scanner jsScanner = new Scanner(new File(filePathPotato)); // ctrl+q will show candidates for scanner + try/catch will auto populate with intellij prompt
*   String wholeLineOfJs = jsScanner.nextLine();
*   if(validateSingleLine(wholeLineOfJs) == false{
*       sout("line was broken");
*   } else {
*       sout ("line is fine");
*   }
*
*   }
*
* public static boolean validateSingleLine(String singleLine){
*   // check whether is passes whatever test we set up
*   // return true or false
*   // don't show error if line is empty
*   // don't show an error if the line ends with opening {
*   // don't show and error if line ends with closing }
*   // don't show error if line contains if or else
*
*   sout("single line: " + singleLine);
*
*   if(
*       singleLine.isEmpty() ||
*       singleLine.endsWith("}") ||
*       singleLine.endsWith("{") ||
*       singleLine.contains("if") ||
*       singleLine.contains("else") ||
*       singleLine.endsWith(";;")
*   }
*
* */
